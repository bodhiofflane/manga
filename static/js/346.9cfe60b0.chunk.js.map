{"version":3,"file":"static/js/346.9cfe60b0.chunk.js","mappings":"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","sources":["components/SingleMangaPageInfo.js","components/SingleMangaPageMainInfo.js","pages/RandomMangaPage.js"],"sourcesContent":["import {Typography, Divider} from '@mui/material';\r\n\r\nconst SingleMangaPageInfo = ({oneMangaInfo}) => {\r\n    const {\r\n        type,\r\n        chapters,\r\n        volumes,\r\n        status,\r\n        published,\r\n        score,\r\n        rank,\r\n        members,\r\n        favorites,\r\n        authors,\r\n        genres,\r\n        demographics,\r\n    } = oneMangaInfo;\r\n\r\n    return (\r\n        <>\r\n            <Typography\r\n                sx={{mb: '10px'}}\r\n                variant=\"h4\"\r\n                component={'h2'}\r\n            >\r\n                {demographics && demographics.length !== 0\r\n                    ? demographics.map((item) => item.name)\r\n                    : 'Information'}\r\n            </Typography>\r\n            <Divider sx={{my: '15px'}} />\r\n            {score ? (\r\n                <>\r\n                    <Typography>\r\n                        Score:{' '}\r\n                        <Typography\r\n                            color=\"primary\"\r\n                            component={'span'}\r\n                        >\r\n                            {score}\r\n                        </Typography>\r\n                    </Typography>\r\n                    <Divider sx={{my: '15px'}} />\r\n                </>\r\n            ) : null}\r\n\r\n            {type ? (\r\n                <>\r\n                    <Typography>\r\n                        Type:{' '}\r\n                        <Typography\r\n                            color=\"primary\"\r\n                            component={'span'}\r\n                        >\r\n                            {type}\r\n                        </Typography>\r\n                    </Typography>\r\n                    <Divider sx={{my: '15px'}} />\r\n                </>\r\n            ) : null}\r\n\r\n            {status ? (\r\n                <>\r\n                    <Typography>\r\n                        Status:{' '}\r\n                        <Typography\r\n                            color=\"primary\"\r\n                            component={'span'}\r\n                        >\r\n                            {status}\r\n                        </Typography>\r\n                    </Typography>\r\n                    <Divider sx={{my: '15px'}} />\r\n                </>\r\n            ) : null}\r\n\r\n            {chapters ? (\r\n                <>\r\n                    <Typography>\r\n                        Chapters:{' '}\r\n                        <Typography\r\n                            color=\"primary\"\r\n                            component={'span'}\r\n                        >\r\n                            {chapters}\r\n                        </Typography>\r\n                    </Typography>\r\n                    <Divider sx={{my: '15px'}} />\r\n                </>\r\n            ) : null}\r\n\r\n            {volumes ? (\r\n                <>\r\n                    <Typography>\r\n                        Volumes:{' '}\r\n                        <Typography\r\n                            color=\"primary\"\r\n                            component={'span'}\r\n                        >\r\n                            {volumes}\r\n                        </Typography>\r\n                    </Typography>\r\n                    <Divider sx={{my: '15px'}} />\r\n                </>\r\n            ) : null}\r\n\r\n            {published ? (\r\n                <>\r\n                    <Typography>\r\n                        Published:{' '}\r\n                        <Typography\r\n                            color=\"primary\"\r\n                            component={'span'}\r\n                        >\r\n                            {published}\r\n                        </Typography>\r\n                    </Typography>\r\n                    <Divider sx={{my: '15px'}} />\r\n                </>\r\n            ) : null}\r\n\r\n            {members ? (\r\n                <>\r\n                    <Typography>\r\n                        Members:{' '}\r\n                        <Typography\r\n                            color=\"primary\"\r\n                            component={'span'}\r\n                        >\r\n                            {members}\r\n                        </Typography>\r\n                    </Typography>\r\n                    <Divider sx={{my: '15px'}} />\r\n                </>\r\n            ) : null}\r\n\r\n            {rank ? (\r\n                <>\r\n                    <Typography>\r\n                        Rank:{' '}\r\n                        <Typography\r\n                            color=\"primary\"\r\n                            component={'span'}\r\n                        >\r\n                            {rank}\r\n                        </Typography>\r\n                    </Typography>\r\n                    <Divider sx={{my: '15px'}} />\r\n                </>\r\n            ) : null}\r\n\r\n            {favorites ? (\r\n                <>\r\n                    <Typography>\r\n                        Favorites:{' '}\r\n                        <Typography\r\n                            color=\"primary\"\r\n                            component={'span'}\r\n                        >\r\n                            {favorites}\r\n                        </Typography>\r\n                    </Typography>\r\n                    <Divider sx={{my: '15px'}} />\r\n                </>\r\n            ) : null}\r\n\r\n            {authors && authors.lenght !== 0 ? (\r\n                <>\r\n                    <Typography>\r\n                        Authors:{' '}\r\n                        <Typography\r\n                            color=\"primary\"\r\n                            component={'span'}\r\n                        >\r\n                            {authors\r\n                                .map((author) => {\r\n                                    return author.name;\r\n                                })\r\n                                .join(', ')}\r\n                        </Typography>\r\n                    </Typography>\r\n                    <Divider sx={{my: '15px'}} />\r\n                </>\r\n            ) : null}\r\n\r\n            {genres && genres.lenght !== 0 ? (\r\n                <>\r\n                    <Typography>\r\n                        Genres:{' '}\r\n                        <Typography\r\n                            color=\"primary\"\r\n                            component={'span'}\r\n                        >\r\n                            {genres.join(', ')}\r\n                        </Typography>\r\n                    </Typography>\r\n                    <Divider sx={{my: '15px'}} />\r\n                </>\r\n            ) : null}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SingleMangaPageInfo;\r\n","import {Box, Grid, Typography, Divider} from '@mui/material';\r\n\r\nconst SingleMangaPageMainInfo = ({oneMangaInfo}) => {\r\n    const {title, thumbnail, synopsis, background} = oneMangaInfo;\r\n\r\n    return (\r\n        <Box>\r\n\r\n            {/* Блок с миниатюрой. Появлятеся при xs */}\r\n            <Box sx={{display: {xs: 'block', md: 'none'}}}>\r\n                <img\r\n                    style={{\r\n                        width: '100%',\r\n                        height: 'auto',\r\n                    }}\r\n                    src={thumbnail}\r\n                    alt={title}\r\n                />\r\n            </Box>\r\n            \r\n            <Grid\r\n                container\r\n                spacing={3}\r\n            >\r\n\r\n                {/* Блок с элементом грид и миниатюрой. Исчезает при xs */}\r\n                <Grid\r\n                    sx={{display: {xs: 'none', md: 'grid'}}}\r\n                    item\r\n                    xs={4}\r\n                >\r\n                    <Box\r\n                        component={'img'}\r\n                        style={{width: '100%', height: 'auto'}}\r\n                        src={thumbnail}\r\n                        alt={title}\r\n                    />\r\n                </Grid>\r\n\r\n                {/* Блок с основной информацией. При xs 12, при md 8. */}\r\n                <Grid\r\n                    item\r\n                    md={8}\r\n                    xs={12}\r\n                    sx={{mb: '15px'}}\r\n                >\r\n                    <Typography\r\n                        sx={{mb: '10px'}}\r\n                        variant=\"h4\"\r\n                        component={'h2'}\r\n                    >\r\n                        {title}\r\n                    </Typography>\r\n                    {synopsis ? (\r\n                        <>\r\n                            <Typography\r\n                                component={'h3'}\r\n                                variant={'h5'}\r\n                            >\r\n                                Synopsis:\r\n                            </Typography>{' '}\r\n                            <Typography>{synopsis}</Typography>{' '}\r\n                            <Divider sx={{my: '15px'}} />{' '}\r\n                        </>\r\n                    ) : null}\r\n\r\n                    {background ? (\r\n                        <>\r\n                            <Typography\r\n                                component={'h3'}\r\n                                variant={'h5'}\r\n                            >\r\n                                Background:\r\n                            </Typography>{' '}\r\n                            <Typography>{background}</Typography>\r\n                            <Divider sx={{my: '15px'}} />{' '}\r\n                        </>\r\n                    ) : null}\r\n\r\n                </Grid>\r\n            </Grid>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default SingleMangaPageMainInfo;\r\n","import {useEffect, useCallback} from 'react';\r\n\r\nimport {useSelector, useDispatch} from 'react-redux';\r\n\r\nimport {Helmet} from 'react-helmet';\r\n\r\nimport {clearingRandomState, fetchRandom} from '../reducers/randomSlice';\r\n\r\nimport SingleMangaPageInfo from '../components/SingleMangaPageInfo';\r\nimport SingleMangaPageMainInfo from '../components/SingleMangaPageMainInfo';\r\nimport ProgressBar from '../components/ProgressBar';\r\n\r\nimport {Box, Grid, Container, Button} from '@mui/material';\r\n\r\nconst RandomMangaPage = () => {\r\n    const random = useSelector((state) => state.randomManga.randomManga);\r\n    const loadingStatus = useSelector(\r\n        (state) => state.randomManga.loadingStatus\r\n    );\r\n    const dispatch = useDispatch();\r\n\r\n    const getRandomManga = useCallback(() => {\r\n        dispatch(fetchRandom());\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        getRandomManga();\r\n\r\n        return () => {\r\n            dispatch(clearingRandomState());\r\n        };\r\n    }, [dispatch, getRandomManga]);\r\n\r\n    const {\r\n        /* id,\r\n        url, */\r\n        title,\r\n    } = random;\r\n\r\n    if (loadingStatus === 'loading') {\r\n        return <ProgressBar />;\r\n    }\r\n\r\n    return (\r\n        <Box>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content={`Random manga: ${title}`}\r\n                />\r\n                <title>{`Random manga: ${title}`}</title>\r\n            </Helmet>\r\n\r\n            <Container maxWidth=\"lg\">\r\n                <Grid\r\n                    container\r\n                    spacing={3}\r\n                >\r\n                    {/* Блок с главной информацией. Становится 12 при sx */}\r\n                    <Grid\r\n                        item\r\n                        xs={12}\r\n                        md={9}\r\n                    >\r\n                        <Button\r\n                            sx={{mb: '15px'}}\r\n                            fullWidth\r\n                            variant=\"outlined\"\r\n                            onClick={getRandomManga}\r\n                        >\r\n                            Get Random Manga\r\n                        </Button>\r\n\r\n                        <SingleMangaPageMainInfo oneMangaInfo={random} />\r\n                    </Grid>\r\n\r\n                    {/* Блок с остальной информацией. Появляется при md */}\r\n                    <Grid\r\n                        item\r\n                        xs={3}\r\n                        sx={{display: {xs: 'none', md: 'grid'}}}\r\n                    >\r\n                        <SingleMangaPageInfo oneMangaInfo={random} />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                {/* Блок с остальной информацией. Появляется при xs */}\r\n                <Box sx={{display: {xs: 'block', md: 'none'}}}>\r\n                    <SingleMangaPageInfo oneMangaInfo={random} />\r\n                </Box>\r\n            </Container>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default RandomMangaPage;\r\n"],"names":["oneMangaInfo","type","chapters","volumes","status","published","score","rank","members","favorites","authors","genres","demographics","sx","mb","variant","component","length","map","item","name","my","color","lenght","author","join","title","thumbnail","synopsis","background","display","xs","md","style","width","height","src","alt","container","spacing","random","useSelector","state","randomManga","loadingStatus","dispatch","useDispatch","getRandomManga","useCallback","fetchRandom","useEffect","clearingRandomState","content","maxWidth","fullWidth","onClick"],"sourceRoot":""}